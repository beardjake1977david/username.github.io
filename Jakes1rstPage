<html>
 
<body>
  <h1>Jake David Beard</h1>
  <p>Welcome to my website!</p>
  <img src="https://content.codecademy.com/articles/github-pages-via-web-app/happy-ice-cream.gif" />
</body>
 
</html>

// Returns a random DNA base
const returnRandBase = () => {
  const dnaBases = ['A', 'T', 'C', 'G'];
  return dnaBases[Math.floor(Math.random() * 4)];
};

// Returns a random single stand of DNA containing 15 bases
const mockUpStrand = () => {
  const newStrand = [];
  for (let i = 0; i < 15; i++) {
    newStrand.push(returnRandBase());
  }
  return newStrand;
};

//Creates a factory function for P. Aequor with the properties of specimenNum, dna and three methods: mutate, compareDNA and willLikelySurvive
const pAequorFactory = (number,array) =>{
  if (typeof(number) === 'number' && Array.isArray(array)){
    return {
    specimenNum: number,
    dna: array,
 // This method checks for a random index value and generates random bases, if they are the same then it changes to a new base and not the one before   
    mutate(){
      const currentBase = this.dna[Math.floor(Math.random()* 15)];
      const newBase = returnRandBase();
      if (currentBase == newBase){
        switch(newBase){
          case 'A':
            this.dna[this.dna.indexOf(currentBase)] = 'T';
            break
          case 'T':
            this.dna[this.dna.indexOf(currentBase)] = 'C';
            break
          case 'C':
            this.dna[this.dna.indexOf(currentBase)] = 'G';
            break
          case 'G':
            this.dna[this.dna.indexOf(currentBase)] = 'A';
            break
          default:
            console.log('No mutation')
        }
      } else {
      this.dna[this.dna.indexOf(currentBase)] = newBase;
      }
      return this.dna
    },
 //This method compares two stands of dna and if they have in the same index the same base, this function makes a operation to get the percentage that the two dna bases shares   
    compareDNA(pAequor, specimenNum){
      let count = 0;
      for (i=0; i < this.dna.length; i++){
        if (this.dna[i]==pAequor[i] && this.dna[this.dna.indexOf(i)] == pAequor[pAequor.indexOf(i)]){
          count += 1;
         }  
      }
      let percentage = (count/pAequor.length)*100;
      return  `specimen ${this.specimenNum} and specimen ${specimenNum} have ${percentage.toFixed(2)}% DNA in common.`
    },
 //This method measures the 'C' and 'G' bases, then makes a count and returns true if the operation has more than 60% of these bases or false if it is lower than 60%   
    willLikelySurvive(){
       let count = 0;
       for(i=0; i < this.dna.length; i++){
        if(this.dna[i]==='C'||this.dna[i]==='G'){
          count +=1;
        } 
       }
      let percentage = (count/this.dna.length)*100;
      if (percentage.toFixed(2) >= 60){
        return true
      } else {
        return false
      }
     }
   }
  } else {
   return 'Not valid Specimen'; 
  }
};

//This function expression returns an array of 30 p. Aequor objects that will survive in it's enviroment
const factoryCreator = () => {
  let newArray = [];
  let count = 1;
  let i = 0;
  do{
  newArray.push(pAequorFactory(count, mockUpStrand()));
  newArray[i].willLikelySurvive();  
  if (newArray[i].willLikelySurvive() === true) {
    count += 1;
    i += 1;  
    } else if (newArray[i].willLikelySurvive() === false){
      newArray.pop();
    }
  } while (i < 30);
  return newArray;
};


console.log('This are the p. Aequor\'s that will survive: \n');
console.log(factoryCreator());

